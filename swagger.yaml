swagger: "2.0"
info:
  title: Milkinium API
  description: Oficial API documentation for Milkinium Test Case management system
  version: "1.0.0"
# the domain of the service
host: localhost:5000
# array of all schemes that your API supports
schemes:
  - http
  - https
# will be prefixed to all paths
basePath: /v1
securityDefinitions:
  apikey:
    type: apiKey
    name: Authorization
    in: header
produces:
  - application/json
paths:
  /authenticate:
    post:
      summary: Authentication end point
      description: The endpoint allows you to authenticate in the system
      tags:
        - Auth
      parameters:
        - name: body
          in: body
          schema:
            $ref: '#/definitions/Auth'
      responses:
        "200":
          description: An auth token


  /users:
    get:
      summary: Get All Users
      description: The endpoint returns all users
      security: 
        - apikey: []
      tags: 
        - User
      responses:
        "200":
          description: An array of users
          schema:
            type: array
            items:
              $ref: '#/definitions/User'

    post:
      summary: Create a User
      description: The endpoint to create a user
      security: 
        - apikey: []
      tags: 
        - User
      parameters:
        - name: body
          in: body
          schema:
            $ref: '#/definitions/User'
      responses:
        "200":
          description: The created user
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
              
  /users/{userId}:
    get:
      summary: Get a user
      description: Get a user by ID
      security:
        - apikey: []
      tags:
        - User
      parameters: 
        - in: path
          name: userId
          type: string
          required: true
      responses:
        "200":
          description: A user
          schema:
            $ref: '#/definitions/User'
            
    delete:
      summary: Delete a user
      description: Delete a user by ID
      security:
        - apikey: []
      tags:
        - User
      parameters:
        - in: path
          name: userId
          type: string
          required: true
      responses:
        "200":
          description: Success status
          
    put:
      summary: Update a user info
      description: Update a user information
      security: 
        - apikey: []
      tags:
        - User
      parameters:
        - in: path
          name: userId
          type: string
          required: true
        - $ref: '#/definitions/User'
      responses:
        "200":
          description: Updated version of the user
          schema:
            $ref: '#/definitions/User'
            
  /projects:
    get:
      summary: Get All Projects
      description: The endpoint returns all projects
      security: 
        - apikey: []
      tags: 
        - Project
      responses:
        "200":
          description: An array of projects
          schema:
            type: array
            items:
              $ref: '#/definitions/Project'

    post:
      summary: Create a project
      description: Create a project
      security:
        - apikey: []
      parameters:
        - name: project
          in: body
          schema:
            $ref: '#/definitions/Project'
      tags:
        - Project
      responses:
        200:
          description: The created project
          schema:
            type: array
            items:
              $ref: '#/definitions/Project'
              
  /projects/{projectId}:
    get:
      summary: Get a Project
      description: Get a project by ID
      parameters:
        - in: path
          name: projectId
          type: string
          required: true
      security: 
        - apikey: []
      tags:
        - Project
      responses:
        "200":
          description: A project
          schema:
            $ref: '#/definitions/Project'
            
    delete:
      summary: Delete a Project
      description: Delete a Project by ID
      parameters: 
        - in: path
          name: projectId
          type: string
          required: true
      security:
        - apikey: []
      tags:
        - Project
      responses:
        "200":
          description: A project
          
    put:
      summary: Edit a project
      description: Edit a project by ID
      parameters:
        - in: path
          name: projectId
          type: string
          required: true
        - $ref: '#/definitions/Project'
      security: 
        - apikey: []
      tags:
        - Project
      responses:
        "200":
          description: A project
          
  /projects/{projectId}/cases:
  
    get:
      summary: Get cases for a project
      description: Get cases for a project
      parameters: 
        - in: path
          name: projectId
          type: string
          required: true
      security: 
        - apikey: []
      tags:
        - Case
      responses:
        200:
          description: List of cases

    post:
      summary: Create a case for a project
      description: Create a case for a project
      parameters:
        - name: case
          in: body
          schema:
            $ref: '#/definitions/Case'
        - name: projectId
          in: path
          type: string
          required: true
      security:
        - apikey: []
      tags:
        - Case
      responses:
        200:
          description: Created case
          
  /cases/{caseId}:
          
    get:
      summary: Get a specific case
      description: Get a case
      parameters: 
        - in: path
          name: caseId
          type: string
          required: true
      security: 
        - apikey: []
      tags:
        - Case
      responses:
        200:
          description: Case
          schema:
            $ref: '#/definitions/Case'
            
    delete:
      summary: Delete a specific  case
      description: Delete a specific case
      parameters: 
        - in: path
          name: caseId
          type: string
          required: true
      security:
        - apikey: []
      tags:
        - Case
      responses:
        200:
          description: Status message
          
    put:
      summary: Edit a specific case
      description: Edit a specific case
      parameters: 
        - in: path
          name: caseId
          type: string
          required: true
      security: 
        - apikey: []
      tags:
        - Case
      responses:
        200:
          description: Updated test case
          schema:
            $ref: '#/definitions/Case'

  /runs/{runId}/tests:
    get:
      summary: Get tests for the test run
      description: List all the tests for a run
      parameters:
        - in: path
          name: runId
          type: string
          required: true
      security:
        - apikey: []
      tags:
        - Run
      responses:
        200:
          description: List of tests
    
    post:
      summary: Add tests to run
      description: Add tests to run
      parameters:
        - in: path
          name: runId
          type: string
          required: true
        - name: body
          in: body
          description: The list of Case Ids
          required: true
          schema:
            $ref: '#/definitions/AddCasesBody'
      security:
          - apikey: []
      tags:
        - Run
      responses:
        200:
          description: Success status
            
  /projects/{projectId}/runs:
    
    get:
      summary: List all the runs for the project
      description: List all the runs for the project
      parameters: 
        - in: path
          name: projectId
          type: string
          required: true
      security: 
        - apikey: []
      tags: 
        - Run
      responses:
        200:
          description: List of runs
          schema:
            $ref: '#/definitions/Run'

    post:
        summary: Create a new run
        description: Create a new run
        parameters: 
          - in: path
            name: projectId
            type: string
            required: true
          - name: body
            in: body
            schema:
              $ref: '#/definitions/Run'
        security: 
          - apikey: []
        tags: 
          - Run
        responses:
          201:
            description: Created Run
            schema:
              $ref: '#/definitions/Run'
            
  /runs/{runId}:
    
    get:
      summary: Get a specific run
      description: Get a specific run
      parameters: 
        - in: path
          name: runId
          type: string
          required: true
      security: 
        - apikey: []
      tags: 
        - Run
      responses:
        200:
          description: Run
          schema:
            $ref: '#/definitions/Run'
            
    put:
      summary: Edit a run
      description: Edit a run
      parameters:
        - in: path
          name: runId
          required: true
          type: string
        - $ref: '#/definitions/Run'
      security:
        - apikey: []
      tags:
        - Run
      responses:
        200:
          description: Edited Run
          schema:
            $ref: '#/definitions/Run'
            
  /tests/{testId}/results:
    get:
      summary: Get results for a test
      description: Get results for a test
      parameters:
        - in: path
          name: testId
          type: string
          required: true
      security: 
        - apikey: []
      tags: 
        - Result
      responses:
        200:
          description: Get results for a run
          schema:
            type: array
            items:
              $ref: '#/definitions/Result'
              
    post:
      summary: Create a result for a test
      description: Create a result for a test
      parameters:
        - in: path
          name: testId
          type: string
          required: true
        - $ref: '#/definitions/Result'
      security: 
        - apikey: []
      tags: 
        - Result
      responses:
        200:
          description: Created Result
          schema:
            $ref: '#/definitions/Result'
            
          
      
            
# Models defenitions  
definitions:

  # User model
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      email: 
        type: "string"
      password:
        type: "string"
      avatar:
        type: "string"
      name:
        $ref: "#/definitions/Name"
      role:
        type: "string"
        description: "The user role"
        enum:
        - "client"
        - "admin"
    xml:
      name: "Order"

  # Name defenition
  Name:
    type: "object"
    properties:
      first: 
        type: "string"
      last: 
        type: "string"
        
  Project:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      
        
  # Auth data
  Auth:
    type: "object"
    properties:
      email:
        type: "string"
      password:
        type: "string"
        
  Case:
    type: "object"
    properties:
      title:
        type: "string"

  AddCasesBody:
    type: object
    properties:
      cases:
        type: array
        items: 
          type: string
        
  Result:
    type: object
    properties:
      id:
        type: string
      test_id:
        type: string
      status:
        $ref: "#/definitions/Status"
      execution_time:
        type: string
        
  Run:
    type: object
    properties:
      id:
        type: string
      title:
        type: string
      description:
        type: string
        
  Status:
    type: object
    properties:
      id:
        type: string
      label:
        type: string
